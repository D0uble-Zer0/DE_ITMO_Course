"""
–î–∞–Ω–Ω—ã–π –∫–æ–¥ –±—ã–ª —Å–æ–∑–¥–∞–Ω —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π. –î–∞–ª—å–Ω–µ–π—à–∞—è —Ä–∞–±–æ—Ç–∞ —Å –Ω–∏–º –≤–Ω–µ —Ä–∞–∑–¥–µ–ª–∞
tests –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –±–µ–∑ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π.
"""

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω—É–∂–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
import requests  # –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å API
from tqdm import tqdm  # –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
import pandas as pd  # –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏
import time  # –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–µ—Ä–∂–µ–∫ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã
API_URL = "https://api.openbrewerydb.org/v1/breweries"
OUTPUT_FILENAME = "data/breweries_500.csv"  # –Ω–æ–≤–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è 500 –ø–∏–≤–æ–≤–∞—Ä–µ–Ω


def load_data_from_api(api_url: str, total_items: int = 500) -> list[dict]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ –≤–µ–±-API

    –î–ª—è 500 –ø–∏–≤–æ–≤–∞—Ä–µ–Ω –Ω–∞–º –Ω—É–∂–Ω–æ:
    - –î–µ–ª–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ (–ø–∞–≥–∏–Ω–∞—Ü–∏—è)
    - –ë—ã—Ç—å –≤–µ–∂–ª–∏–≤—ã–º–∏ –∫ —Å–µ—Ä–≤–µ—Ä—É (–¥–æ–±–∞–≤–ª—è—Ç—å –∑–∞–¥–µ—Ä–∂–∫–∏)
    - –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ—à–∏–±–∫–∏
    """
    all_breweries = []  # –∑–¥–µ—Å—å –±—É–¥–µ–º —Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é - –±—É–¥–µ–º –∑–∞–ø—Ä–∞—à–∏–≤–∞—Ç—å –ø–æ 50 –ø–∏–≤–æ–≤–∞—Ä–µ–Ω –∑–∞ —Ä–∞–∑
    per_page = 50  # –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞ –æ–¥–Ω—É —Å—Ç—Ä–∞–Ω–∏—Ü—É
    # –í—ã—á–∏—Å–ª—è–µ–º —Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–∞–Ω–∏—Ü –Ω—É–∂–Ω–æ –¥–ª—è 500 –ø–∏–≤–æ–≤–∞—Ä–µ–Ω
    pages_needed = (total_items + per_page - 1) // per_page

    print(f"–ó–∞–≥—Ä—É–∂–∞–µ–º {total_items} –ø–∏–≤–æ–≤–∞—Ä–µ–Ω...")
    print(f"–≠—Ç–æ –∑–∞–π–º–µ—Ç –ø—Ä–∏–º–µ—Ä–Ω–æ {pages_needed} –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ API")

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –Ω—É–∂–Ω—ã–º —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
    for page in tqdm(range(1, pages_needed + 1)):
        # –°—á–∏—Ç–∞–µ–º —Å–∫–æ–ª—å–∫–æ –µ—â–µ –Ω—É–∂–Ω–æ –∑–∞–≥—Ä—É–∑–∏—Ç—å
        items_remaining = total_items - len(all_breweries)
        # –ù–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–µ—Ä–µ–º –ª–∏–±–æ –º–∞–∫—Å–∏–º—É–º (50), –ª–∏–±–æ –æ—Å—Ç–∞—Ç–æ–∫
        current_per_page = min(per_page, items_remaining)

        # –ï—Å–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ - –≤—ã—Ö–æ–¥–∏–º
        if current_per_page <= 0:
            break

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        params = {
            "page": page,  # –Ω–æ–º–µ—Ä —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            "per_page": current_per_page,  # —Å–∫–æ–ª—å–∫–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —ç—Ç–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
        }

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
            response = requests.get(
                api_url,
                params=params,
                headers={"Content-Type": "application/json"},
                timeout=15,  # —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –¥–ª—è –±–æ–ª—å—à–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            )

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
            if response.status_code == 200:
                breweries = response.json()  # –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º JSON –≤ Python-–æ–±—ä–µ–∫—Ç—ã

                # –ï—Å–ª–∏ API –≤–µ—Ä–Ω—É–ª–æ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ - –∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—á–∏–ª–∏—Å—å
                if not breweries:
                    print(f"\n–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ–Ω–µ—Ü –¥–∞–Ω–Ω—ã—Ö –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}")
                    break

                # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø–∏–≤–æ–≤–∞—Ä–Ω–∏ –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
                all_breweries.extend(breweries)

                # –í—ã–≤–æ–¥–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
                print(f"\n–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(breweries)} –ø–∏–≤–æ–≤–∞—Ä–µ–Ω")
                print(f"–í—Å–µ–≥–æ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: {len(all_breweries)} –∏–∑ {total_items}")

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏:
                # 1. –£–∂–µ –∑–∞–≥—Ä—É–∑–∏–ª–∏ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ
                # 2. –ù–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ –º–µ–Ω—å—à–µ –¥–∞–Ω–Ω—ã—Ö —á–µ–º –º—ã –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª–∏ (–∑–Ω–∞—á–∏—Ç –¥–∞–Ω–Ω—ã–µ –∫–æ–Ω—á–∏–ª–∏—Å—å)
                if (
                    len(all_breweries) >= total_items
                    or len(breweries) < current_per_page
                ):
                    break

            else:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏ API
                print(
                    f"\n–û–®–ò–ë–ö–ê! API –≤–µ—Ä–Ω—É–ª–æ —Å—Ç–∞—Ç—É—Å {response.status_code} –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}"
                )
                print(f"–¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏: {response.text}")

                # –ï—Å–ª–∏ —ç—Ç–æ –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ (5xx), –≤–æ–∑–º–æ–∂–Ω–æ —Å—Ç–æ–∏—Ç –ø–æ–¥–æ–∂–¥–∞—Ç—å
                if response.status_code >= 500:
                    print("–°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω, –¥–µ–ª–∞–µ–º –ø–∞—É–∑—É 10 —Å–µ–∫—É–Ω–¥...")
                    time.sleep(10)
                else:
                    break  # –¥–ª—è –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ –ø—Ä–µ—Ä—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É

        except requests.exceptions.RequestException as e:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–µ—Ç–µ–≤—ã–µ –æ—à–∏–±–∫–∏
            print(f"\n–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ {page}: {e}")
            print("–î–µ–ª–∞–µ–º –ø–∞—É–∑—É 5 —Å–µ–∫—É–Ω–¥ –∏ –ø—Ä–æ–±—É–µ–º –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")
            time.sleep(5)
            continue  # –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É

        # –î–µ–ª–∞–µ–º –Ω–µ–±–æ–ª—å—à—É—é –ø–∞—É–∑—É –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ —á—Ç–æ–±—ã –Ω–µ –ø–µ—Ä–µ–≥—Ä—É–∂–∞—Ç—å API
        # –≠—Ç–æ –≤–∞–∂–Ω–æ –∫–æ–≥–¥–∞ –º—ã –¥–µ–ª–∞–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥!
        time.sleep(0.5)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–æ–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª—É—á–∞–π–Ω–æ –≤–∑—è–ª–∏ –±–æ–ª—å—à–µ)
    final_result = all_breweries[:total_items]
    print(f"\n‚úÖ –§–∏–Ω–∞–ª—å–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: –∑–∞–≥—Ä—É–∂–µ–Ω–æ {len(final_result)} –ø–∏–≤–æ–≤–∞—Ä–µ–Ω")
    return final_result


def convert_to_df_and_save(data: list[dict], fname: str) -> pd.DataFrame | None:
    """
    –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π –≤ —Ç–∞–±–ª–∏—Ü—É –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
    """
    if not data:
        print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è!")
        return None

    # –°–æ–∑–¥–∞–µ–º DataFrame –∏–∑ –Ω–∞—à–µ–≥–æ —Å–ø–∏—Å–∫–∞ –ø–∏–≤–æ–≤–∞—Ä–µ–Ω
    df = pd.DataFrame(data)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV —Ñ–∞–π–ª
    df.to_csv(fname, index=False)

    print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ —Ñ–∞–π–ª: {fname}")
    print(f"üìä –†–∞–∑–º–µ—Ä —Ç–∞–±–ª–∏—Ü—ã: {df.shape} (—Å—Ç—Ä–æ–∫–∏ x —Å—Ç–æ–ª–±—Ü—ã)")

    return df


def analyze_dataset(df: pd.DataFrame):
    """
    –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—à –¥–∞—Ç–∞—Å–µ—Ç - —Å–º–æ—Ç—Ä–∏–º —á—Ç–æ —É –Ω–∞—Å –ø–æ–ª—É—á–∏–ª–æ—Å—å
    """
    print("\n" + "=" * 50)
    print("üìà –ê–ù–ê–õ–ò–ó –î–ê–¢–ê–°–ï–¢–ê")
    print("=" * 50)

    # –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∞–±–ª–∏—Ü–µ
    print("\n1. –û–°–ù–û–í–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø:")
    print(f"   - –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π: {len(df)}")
    print(f"   - –í—Å–µ–≥–æ —Å—Ç–æ–ª–±—Ü–æ–≤: {len(df.columns)}")

    # –°–º–æ—Ç—Ä–∏–º –Ω–∞ —Å—Ç–æ–ª–±—Ü—ã
    print("\n2. –°–¢–û–õ–ë–¶–´ –í –î–ê–¢–ê–°–ï–¢–ï:")
    for i, column in enumerate(df.columns, 1):
        print(f"   {i}. {column}")

    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –≥–µ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –¥–∞–Ω–Ω—ã–º
    print("\n3. –ì–ï–û–ì–†–ê–§–ò–ß–ï–°–ö–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê:")
    if "state" in df.columns:
        state_counts = df["state"].value_counts()
        print(f"   - –®—Ç–∞—Ç–æ–≤ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(state_counts)}")
        print(f"   - –¢–æ–ø-5 —à—Ç–∞—Ç–æ–≤ –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø–∏–≤–æ–≤–∞—Ä–µ–Ω:")
        for state, count in state_counts.head().items():
            print(f"     ‚Ä¢ {state}: {count} –ø–∏–≤–æ–≤–∞—Ä–µ–Ω")

    if "country" in df.columns:
        country_counts = df["country"].value_counts()
        print(f"   - –°—Ç—Ä–∞–Ω –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ: {len(country_counts)}")

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø—Ä–∏–º–µ—Ä–æ–≤
    print("\n4. –ü–ï–†–í–´–ï 5 –ü–ò–í–û–í–ê–†–ï–ù:")
    display_columns = ["name", "city", "state", "country"]
    available_columns = [col for col in display_columns if col in df.columns]
    if available_columns:
        print(df[available_columns].head())


def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è - —É–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø—Ä–æ—Ü–µ—Å—Å–æ–º
    """
    # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    import os

    os.makedirs("data", exist_ok=True)

    print("üöÄ –ó–ê–ü–£–°–ö –ü–†–û–ì–†–ê–ú–ú–´ –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø –î–ê–¢–ê–°–ï–¢–ê –ò–ó 500 –ü–ò–í–û–í–ê–†–ï–ù")
    print("=" * 60)

    # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    print("\nüìç –®–ê–ì 1: –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ API")
    breweries = load_data_from_api(API_URL, 500)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–≥—Ä—É–∑–∫–∏
    if not breweries:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ!")
        return

    # –®–∞–≥ 2: –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
    print("\nüìç –®–ê–ì 2: –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö")
    result_df = convert_to_df_and_save(breweries, OUTPUT_FILENAME)

    if result_df is not None:
        # –®–∞–≥ 3: –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —á—Ç–æ –ø–æ–ª—É—á–∏–ª–æ—Å—å
        print("\nüìç –®–ê–ì 3: –ê–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö")
        analyze_dataset(result_df)

        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        print("\nüéâ –î–ê–¢–ê–°–ï–¢ –£–°–ü–ï–®–ù–û –°–û–ó–î–ê–ù!")
        print(f"üìÅ –§–∞–π–ª: {OUTPUT_FILENAME}")
        print(f"üìä –†–∞–∑–º–µ—Ä: {len(result_df)} –ø–∏–≤–æ–≤–∞—Ä–µ–Ω")
        print(f"üóÇÔ∏è –°—Ç–æ–ª–±—Ü–æ–≤: {len(result_df.columns)}")


# –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≥—Ä–∞–º–º—É –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω–∞–ø—Ä—è–º—É—é
if __name__ == "__main__":
    main()
